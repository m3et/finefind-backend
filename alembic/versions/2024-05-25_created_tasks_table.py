import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "1eb077b12243"
down_revision = "d40f40264827"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), sa.Identity(always=True), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("tags", sa.ARRAY(sa.String)),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.func.now(), nullable=False
        ),
        sa.Column("updated_at", sa.DateTime(), onupdate=sa.func.now()),
        sa.Column("status", sa.String(), nullable=False, server_default="pending"),
        sa.Column("priority", sa.String()),
        sa.Column("due_date", sa.DateTime()),
        sa.Column("assigned_to", sa.Integer()),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("estimated_time", sa.Interval()),
        sa.Column("actual_time", sa.Interval()),
        sa.Column("parent_task_id", sa.Integer()),
        sa.Column("recurrence_rule", sa.String()),
        sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tasks")
    # ### end Alembic commands ###
